Hereâ€™s a complete **practice project** from start to finish that will help you learn and apply key concepts in Kubernetes, Docker, and Helm. The project involves deploying a **multi-tier web application** using Docker containers on a Kubernetes cluster, managed by Helm. The application consists of a **frontend**, a **backend**, and a **database**.

### **Project Overview**

1. **Objective**: 
   - Deploy a multi-tier web app with a frontend, backend, and database using Docker and Kubernetes, managed by Helm.
   
2. **Technologies**:
   - **Docker** (for containerization)
   - **Kubernetes** (for orchestration)
   - **Helm** (for packaging and managing Kubernetes apps)
   - **Node.js** (for the frontend and backend)
   - **PostgreSQL** (for the database)

3. **Steps**:
   - Step 1: Set up Docker containers for each app component (frontend, backend, database).
   - Step 2: Deploy the application manually on Kubernetes.
   - Step 3: Package the deployment into a Helm chart.
   - Step 4: Manage upgrades, rollbacks, and scaling with Helm.

---

### **Step 1: Set Up Docker Containers**

#### **Frontend (Node.js)**
1. Create a simple **Node.js** frontend app.

```js
// frontend/index.js
const express = require('express');
const app = express();
const PORT = 8080;

app.get('/', (req, res) => {
  res.send('Hello from Frontend!');
});

app.listen(PORT, () => {
  console.log(`Frontend is running on port ${PORT}`);
});
```

2. Create a `Dockerfile` for the frontend.

```Dockerfile
# frontend/Dockerfile
FROM node:14-alpine
WORKDIR /app
COPY . .
RUN npm install
CMD ["node", "index.js"]
```

3. Build the Docker image and push it to a Docker registry (e.g., Docker Hub).

```bash
# Build the Docker image
docker build -t <your-docker-username>/frontend .

# Push the image to Docker Hub
docker push <your-docker-username>/frontend
```

#### **Backend (Node.js)**
1. Create a simple **Node.js** backend app.

```js
// backend/index.js
const express = require('express');
const app = express();
const PORT = 8081;

app.get('/api', (req, res) => {
  res.send('Hello from Backend!');
});

app.listen(PORT, () => {
  console.log(`Backend is running on port ${PORT}`);
});
```

2. Create a `Dockerfile` for the backend.

```Dockerfile
# backend/Dockerfile
FROM node:14-alpine
WORKDIR /app
COPY . .
RUN npm install
CMD ["node", "index.js"]
```

3. Build and push the Docker image for the backend.

```bash
docker build -t <your-docker-username>/backend .
docker push <your-docker-username>/backend
```

#### **Database (PostgreSQL)**
1. Use the official **PostgreSQL** Docker image.

```bash
docker pull postgres:13
docker tag postgres:13 <your-docker-username>/database
docker push <your-docker-username>/database
```

---

### **Step 2: Deploy on Kubernetes**

#### **1. Create Kubernetes Manifests for Each Component**

1. **Frontend Deployment and Service**:

```yaml
# frontend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
    spec:
      containers:
      - name: frontend
        image: <your-docker-username>/frontend
        ports:
        - containerPort: 8080

---
# frontend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer
```

2. **Backend Deployment and Service**:

```yaml
# backend-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend-deployment
spec:
  replicas: 2
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: <your-docker-username>/backend
        ports:
        - containerPort: 8081

---
# backend-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: backend-service
spec:
  selector:
    app: backend
  ports:
    - protocol: TCP
      port: 8081
      targetPort: 8081
  type: ClusterIP
```

3. **PostgreSQL Database Deployment**:

```yaml
# db-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: db-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: database
  template:
    metadata:
      labels:
        app: database
    spec:
      containers:
      - name: database
        image: <your-docker-username>/database
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          value: "postgres"
        - name: POSTGRES_PASSWORD
          value: "password"
        - name: POSTGRES_DB
          value: "appdb"

---
# db-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: db-service
spec:
  selector:
    app: database
  ports:
    - protocol: TCP
      port: 5432
      targetPort: 5432
  type: ClusterIP
```

#### **2. Apply the Manifests to Kubernetes**

```bash
kubectl apply -f frontend-deployment.yaml
kubectl apply -f backend-deployment.yaml
kubectl apply -f db-deployment.yaml
```

---

### **Step 3: Package into a Helm Chart**

#### **1. Create the Helm Chart**
```bash
helm create my-web-app
```

This creates a default directory structure for a Helm chart. Modify the templates in `my-web-app/templates` to reflect the Kubernetes manifests created in Step 2.

#### **2. Add Configurations in `values.yaml`**
In the `values.yaml` file, set the default values for the Docker images, replicas, and environment variables.

```yaml
frontend:
  image: <your-docker-username>/frontend
  replicas: 2

backend:
  image: <your-docker-username>/backend
  replicas: 2

database:
  image: <your-docker-username>/database
  env:
    POSTGRES_USER: postgres
    POSTGRES_PASSWORD: password
    POSTGRES_DB: appdb
```

#### **3. Deploy Using Helm**
```bash
# Package the Helm chart
helm package my-web-app

# Deploy the Helm chart to Kubernetes
helm install my-web-app ./my-web-app
```

#### **4. Helm Chart Upgrade and Rollback**

To upgrade the frontend version:
```bash
helm upgrade my-web-app ./my-web-app --set frontend.image=<your-docker-username>/frontend:v2
```

To rollback to the previous version:
```bash
helm rollback my-web-app 1
```

---

### **Step 4: Scale and Manage the App**

1. **Scaling the Backend**:

```bash
helm upgrade my-web-app ./my-web-app --set backend.replicas=5
```

This will scale the backend to 5 replicas, demonstrating Helm's ability to manage updates efficiently.

---

### **Solution Breakdown**

- **Containers**: Frontend, backend, and database are containerized using Docker.
- **Kubernetes**: Managed with deployments and services.
- **Helm**: The Helm chart simplifies deployment, scaling, upgrades, and rollback.
